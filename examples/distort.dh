include "std/frag"
include "std/win"
include "std/math"
include "std/img"
include "std/io"
include "std/arr"
include "std/vec"
include "std/time"

resolution := {256,256};
frag.init(win.init(...resolution,win.CONTEXT_3D));

pixels := img.decode(io.read_file("examples/assets/pepper.png"));
image := frag.texture(...resolution);
image.write_pixels(pixels);

func ripple(
  v_uv:vec[f32,2],
  u_image:frag.Texture,
  u_t:f32
):vec[f32,4]{
  
  center := {0.5,0.5}
  d := v_uv-center;
  l := vec.mag(d);
  u := vec.dir(d);
  w := math.sin(l*50.0-u_t*0.015);
  color := u_image.sample(v_uv+u*w*0.075*math.cos(u_t*0.001));
  return {color.r,color.g,color.b,1.0};
}

shader := frag.program(embed ripple as "fragment");


while (1){
  time.fps(120);

  frag.begin(shader);
  frag.uniform("u_t", time.millis() as f32); 
  frag.uniform("u_image", image);
  frag.render();
  frag.end();
  
  win.poll();
}