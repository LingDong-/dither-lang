include "std/g3d"
include "std/frag"
include "std/win"
include "std/list"
include "std/arr"
include "std/time"
include "std/vec"
include "std/math"
include "std/img"
include "std/io"

W := 512;
H := 512;

context := win.init(W,H,win.CONTEXT_3D);
g3d.init(context);
frag.init(context);

func normal_material(v_normal:vec[f32,3]):vec[f32,4]{
  c := v_normal*0.5+0.5;
  return {c.x,c.y,c.z,1.0};
}
func lambert_material(v_normal:vec[f32,3],u_light:vec[f32,3]):vec[f32,4]{
  l := u_light.dir();
  c := v_normal.x*l.x + 
       v_normal.y*l.y +
       v_normal.z*l.z ;
  c = math.max(c,0.0)*0.75 + 0.25;
  return {c,c,c,1.0};
}
func textured_material(v_uv:vec[f32,2],u_image:frag.Texture):vec[f32,4]{
  c := u_image.sample(v_uv);
  return {c.x,c.y,c.z,1.0};
}

shader0 := frag.program(embed normal_material as "fragment");
shader1 := frag.program(embed lambert_material as "fragment");
shader2 := frag.program(embed textured_material as "fragment");

cube_vertices:=list[vec[f32,3]]{
  vec[f32,3]{ 1.,-1.,-1.}, vec[f32,3]{ 1., 1.,-1.}, 
  vec[f32,3]{ 1., 1., 1.}, vec[f32,3]{ 1.,-1., 1.}, 
  vec[f32,3]{-1.,-1., 1.}, vec[f32,3]{-1., 1., 1.}, 
  vec[f32,3]{-1., 1.,-1.}, vec[f32,3]{-1.,-1.,-1.}, 
  vec[f32,3]{-1., 1.,-1.}, vec[f32,3]{-1., 1., 1.}, 
  vec[f32,3]{ 1., 1., 1.}, vec[f32,3]{ 1., 1.,-1.}, 
  vec[f32,3]{-1.,-1., 1.}, vec[f32,3]{-1.,-1.,-1.}, 
  vec[f32,3]{ 1.,-1.,-1.}, vec[f32,3]{ 1.,-1., 1.}, 
  vec[f32,3]{ 1.,-1., 1.}, vec[f32,3]{ 1., 1., 1.}, 
  vec[f32,3]{-1., 1., 1.}, vec[f32,3]{-1.,-1., 1.}, 
  vec[f32,3]{-1.,-1.,-1.}, vec[f32,3]{-1., 1.,-1.}, 
  vec[f32,3]{ 1., 1.,-1.}, vec[f32,3]{ 1.,-1.,-1.}
};

mesh := g3d.Mesh{
  mode:g3d.MODE_TRIG_LIST,
  vertices:cube_vertices,
  indices:list[i32]{
     0,  1,  2,  0,  2,  3,
     4,  5,  6,  4,  6,  7,
     8,  9, 10,  8, 10, 11,
    12, 13, 14, 12, 14, 15,
    16, 17, 18, 16, 18, 19,
    20, 21, 22, 20, 22, 23 
  },
  normals:list[vec[f32,3]]{
    vec[f32,3]{ 1., 0.,0.}, vec[f32,3]{ 1., 0.,0.},
    vec[f32,3]{ 1., 0.,0.}, vec[f32,3]{ 1., 0.,0.},
    vec[f32,3]{-1., 0.,0.}, vec[f32,3]{-1., 0.,0.},
    vec[f32,3]{-1., 0.,0.}, vec[f32,3]{-1., 0.,0.},
    vec[f32,3]{ 0., 1.,0.}, vec[f32,3]{ 0., 1.,0.},
    vec[f32,3]{ 0., 1.,0.}, vec[f32,3]{ 0., 1.,0.},
    vec[f32,3]{ 0.,-1.,0.}, vec[f32,3]{ 0.,-1.,0.},
    vec[f32,3]{ 0.,-1.,0.}, vec[f32,3]{ 0.,-1.,0.},
    vec[f32,3]{ 0.,0., 1.}, vec[f32,3]{ 0.,0., 1.},
    vec[f32,3]{ 0.,0., 1.}, vec[f32,3]{ 0.,0., 1.},
    vec[f32,3]{ 0.,0.,-1.}, vec[f32,3]{ 0.,0.,-1.},
    vec[f32,3]{ 0.,0.,-1.}, vec[f32,3]{ 0.,0.,-1.},
  },
  uvs:list[vec[f32,2]]{
    vec[f32,2]{0., 0.}, vec[f32,2]{0., 1.}, vec[f32,2]{1., 1.},
    vec[f32,2]{1., 0.}, vec[f32,2]{0., 0.}, vec[f32,2]{0., 1.},
    vec[f32,2]{1., 1.}, vec[f32,2]{1., 0.}, vec[f32,2]{0., 0.},
    vec[f32,2]{0., 1.}, vec[f32,2]{1., 1.}, vec[f32,2]{1., 0.},
    vec[f32,2]{0., 0.}, vec[f32,2]{0., 1.}, vec[f32,2]{1., 1.},
    vec[f32,2]{1., 0.}, vec[f32,2]{0., 0.}, vec[f32,2]{0., 1.},
    vec[f32,2]{1., 1.}, vec[f32,2]{1., 0.}, vec[f32,2]{0., 0.},
    vec[f32,2]{0., 1.}, vec[f32,2]{1., 1.}, vec[f32,2]{1., 0.}
  }
}

wire := g3d.Mesh{
  mode:g3d.MODE_LINE_LIST,
  vertices:cube_vertices,
  indices:list[i32]{
    0, 1, 1, 2, 2, 3, 3, 0,
    4, 5, 5, 6, 6, 7, 7, 4,
    2, 5, 1, 6, 0, 7, 3, 4
  },
};

cam := g3d.Camera{}

pixels := img.decode(io.read_file("examples/assets/pepper.png"));
image := frag.texture(...pixels.shape().yx);
image.write_pixels(pixels);

frame := 0;
lookx : f32 = 0;

while (1){
  time.fps(120);

  g3d.background(0.1);

  cam.look_at({0,0,8},{lookx,0,0},g3d.AXIS_Y);
  cam.perspective(60,W/(H as f32),0.1,100.0);

  frag.begin(shader0);
  cam.begin();
  mesh.draw(
    g3d.mat.rotate_deg(g3d.AXIS_Y,frame*2) @* 
    g3d.mat.rotate_deg(g3d.AXIS_X,frame*1) @*
    g3d.mat.translate(-2,-2,0)
  );
  cam.end();
  frag.end();

  frag.begin(shader1);
  frag.uniform("u_light",{0.1,0.2,0.3});
  cam.begin();
  mesh.draw(
    g3d.mat.rotate_deg(g3d.AXIS_Y,frame*1) @* 
    g3d.mat.rotate_deg(g3d.AXIS_X,frame*2) @*
    g3d.mat.translate(2,-2,0)
  );
  cam.end();
  frag.end();

  frag.begin(shader2);
  frag.uniform("u_image",image);
  cam.begin();
  mesh.draw(
    g3d.mat.rotate_deg(g3d.AXIS_Y,frame*2) @* 
    g3d.mat.rotate_deg(g3d.AXIS_Z,frame*1) @*
    g3d.mat.translate(2,2,0)
  );
  cam.end();
  frag.end();

  cam.begin();
  wire.draw(
    g3d.mat.rotate_deg(g3d.AXIS_X,frame*2) @* 
    g3d.mat.rotate_deg(g3d.AXIS_Z,frame*1) @*
    g3d.mat.translate(-2,2,0)
  );
  cam.end();

  g3d.flush();

  e := win.poll();
  if (e.type == win.MOUSE_MOVED){
    lookx = (e.x-(W/2))*0.01;
  }
  frame++;
}