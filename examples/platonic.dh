include "std/g3d"
include "std/list"
include "std/win"
include "std/rand"
include "std/frag"
include "std/math"
include "std/io"
include "std/vec"
include "std/arr"
include "std/time"

W := 512
H := 512
PHI := 1.618034
IHP := 1./PHI

context := win.init(W,H,win.CONTEXT_3D)
g3d.init(context);
frag.init(context);

func lambert_material(
  @varying normal:vec[f32,3], 
  @uniform l:vec[f32,3], 
  @uniform base:vec[f32,3]
):vec[f32,4]{
  g := math.max(normal.dot(l),0.0)*0.9 + 0.1;
  return {base.x*g,base.y*g,base.z*g,1.0};
}

func normal_material(@varying normal:vec[f32,3]):vec[f32,4]{
  c := normal*0.5+0.5;
  return {c.x,c.y,c.z,1.0};
}

func shadow_material():vec[f32,4]{
  return {0.,0.,0.,1.};
}

func textured_material(@varying uv:vec[f32,2], @uniform image:frag.Texture):vec[f32,4]{
  one := 1.0/(W as f32);
  c := {0.,0.,0.,0.};
  n := 0
  ft := math.min(
    math.min(
      math.min(
        math.abs(uv.y-0.35)+math.abs(uv.x-0.2),
        math.abs(uv.y-0.65)+math.abs(uv.x-0.2)
      ),math.min(
        math.abs(uv.y-0.35)+math.abs(uv.x-0.5),
        math.abs(uv.y-0.65)+math.abs(uv.x-0.5)
      )
    ),
    math.min(
      math.abs(uv.y-0.35)+math.abs(uv.x-0.8),
      math.abs(uv.y-0.65)+math.abs(uv.x-0.8)
    )
  )
  for (i:=-2; i<=2; i++){
    for (j:=-2; j<=2; j++){
      c = c + image.sample(uv+{(i as f32),j}*one*ft*10.0);
      n++;
    }
  }
  c = (c/(n as f32))*0.6+0.2;
  gd := math.floor(uv*8.0);
  ch := (gd.x+gd.y)%2.0;
  ch = ch*0.7+0.3;
  c = c*ch;

  return {c.x,c.y,c.z,1.0};
}

shader0 := frag.program(embed lambert_material as "fragment");
shader1 := frag.program(embed shadow_material as "fragment");
shader2 := frag.program(embed textured_material as "fragment");


func make_platonic(verts:list[vec[f32,3]],face_indices:arr[i32,2],do_norm:i32):g3d.Mesh{
  mesh := g3d.Mesh{};
  n := face_indices.shape()[1];
  for (f := 0; f < face_indices.shape()[0]; f++) {
    for (v := 0; v < n; v++) {
      p0 := verts[face_indices[f,(v+n-1)%n]]
      p1 := verts[face_indices[f,v]];
      p2 := verts[face_indices[f,(v+1)%n]];
      nml := (p2-p1).cross(p1-p0).dir();
      mesh.vertices.push(do_norm?p1.dir():p1);
      if (v>1){
        mesh.indices.push(f * n);
        mesh.indices.push(f * n + v-1);
        mesh.indices.push(f * n + v);
      }
      mesh.normals.push(nml);
    }
  }
  return mesh
}

tetrahedron := make_platonic(
  list[vec[f32,3]]{{1.,1,1},{-1.,-1,1},{-1.,1,-1},{1.,-1,-1}},
  arr[i32,2]{0,1,2; 0,3,1; 0,2,3; 1,3,2},1
)

hexahedron := make_platonic(
  list[vec[f32,3]]{
    {-1.,-1,-1},{ 1.,-1,-1},{ 1., 1,-1},{-1., 1,-1},
    {-1.,-1, 1},{ 1.,-1, 1},{ 1., 1, 1},{-1., 1, 1} 
  },
  arr[i32,2]{
    0, 1, 2, 3;  4, 7, 6, 5;  0, 4, 5, 1;
    3, 2, 6, 7;  1, 5, 6, 2;  0, 3, 7, 4;
  },1
)

octahedron := make_platonic(
  list[vec[f32,3]]{
    { 1.,  0,  0}, {-1.,  0,  0}, { 0.,  1,  0}, 
    { 0., -1,  0}, { 0.,  0,  1}, { 0.,  0, -1},
  },
  arr[i32,2]{
    0,4,2; 2,4,1; 1,4,3; 3,4,0;
    0,2,5; 2,1,5; 1,3,5; 3,0,5;
  },1
)

dodecahedron := make_platonic(
  list[vec[f32,3]]{
    { -1.,  -1,  -1},{ 1.,  -1,  -1},{  1.,   1, -1},{-1.,  1, -1},
    { -1.,  -1,   1},{ 1.,  -1,   1},{  1.,   1,  1},{-1.,  1,  1},
    {   0,-IHP,-PHI},{  0, IHP,-PHI},{   0,-IHP,PHI},{  0,IHP,PHI},
    {-IHP,-PHI,   0},{IHP,-PHI,   0},{-IHP, PHI,  0},{IHP,PHI,  0},
    {-PHI,   0,-IHP},{PHI,   0,-IHP},{-PHI,   0,IHP},{PHI,  0,IHP}
  },
  arr[i32,2]{
    0, 8, 9, 3, 16  ;   0, 16, 18, 4, 12;   0, 12, 13, 1, 8 ;
    1, 13, 5, 19, 17;   1, 17, 2, 9, 8  ;   2, 17, 19, 6, 15;
    2, 15, 14, 3, 9 ;   3, 14, 7, 18, 16;   6, 11, 7, 14, 15;
    4, 18, 7, 11, 10;   5, 13, 12, 4, 10;   11, 6, 19, 5, 10;
  },1
);

icosahedron := make_platonic(
  list[vec[f32,3]]{
    {-1,  PHI, 0}, { 1,  PHI, 0}, {-1, -PHI, 0}, { 1, -PHI, 0},
    {0, -1,  PHI}, {0,  1,  PHI}, {0, -1, -PHI}, {0,  1, -PHI},
    { PHI, 0, -1}, { PHI, 0,  1}, {-PHI, 0, -1}, {-PHI, 0,  1}
  },
  arr[i32,2]{
    0,5,11;  0, 1, 5;  0, 7, 1;  0,10,7;  0,11,10;
    1,9, 5;  5, 4,11; 11, 2,10; 10, 6,7;  7, 8, 1;
    3,4, 9;  3, 2, 4;  3, 6, 2;  3, 8,6;  3, 9, 8;
    4,5, 9;  2,11, 4;  6,10, 2;  8, 7,6;  9, 1, 8;
  },1
);

teapotahedron := make_platonic(
  list[vec[f32,3]]{
    {-0.875,-0.327,0},     {-0.851,-0.348,0.074}, {-0.851,-0.348,-0.074},{-0.856,-0.175,0},     {-0.836,-0.393,0.098}, {-0.836,-0.393,-0.098},{-0.841,-0.458,0},     {-0.821,-0.438,0.074}, 
    {-0.821,-0.438,-0.074},{-0.831,-0.458,0},     {-0.807,-0.327,0.343}, {-0.807,-0.327,-0.343},{-0.807,-0.012,0},     {-0.79,-0.175,0.336},  {-0.79,-0.175,-0.336}, {-0.776,-0.458,0.33},  
    {-0.776,-0.458,-0.33}, {-0.766,-0.554,0},     {-0.744,-0.012,0.317}, {-0.744,-0.012,-0.317},{-0.737,0.157,0},      {-0.706,-0.554,0.301}, {-0.706,-0.554,-0.301},{-0.7,0.165,0},        
    {-0.693,0.18,0.074},   {-0.693,0.18,-0.074},  {-0.691,-0.619,0},     {-0.68,0.157,0.289},   {-0.68,0.157,-0.289},  {-0.678,0.213,0.098},  {-0.678,0.213,-0.098}, {-0.663,0.247,0.074},  
    {-0.663,0.247,-0.074}, {-0.656,-0.656,0},     {-0.656,0.262,0},      {-0.656,0.329,0},      {-0.637,-0.619,0.271}, {-0.637,-0.619,-0.271},{-0.634,0.361,0},      {-0.621,-0.327,0.621}, 
    {-0.621,-0.327,-0.621},{-0.614,0.371,0},      {-0.591,0.329,0},      {-0.608,-0.175,0.608}, {-0.608,-0.175,-0.608},{-0.605,-0.656,0.258}, {-0.605,0.329,0.258},  {-0.605,-0.656,-0.258},
    {-0.605,0.329,-0.258}, {-0.604,0.361,0},      {-0.597,-0.458,0.597}, {-0.597,-0.458,-0.597},{-0.585,0.361,0.249},  {-0.585,0.361,-0.249}, {-0.573,-0.012,0.573}, {-0.573,-0.012,-0.573},
    {-0.566,0.371,0.241},  {-0.566,0.371,-0.241}, {-0.545,0.329,0.232},  {-0.545,0.329,-0.232}, {-0.557,0.361,0.237},  {-0.557,0.361,-0.237}, {-0.544,-0.554,0.544}, {-0.544,-0.554,-0.544},
    {-0.523,0.157,0.523},  {-0.523,0.157,-0.523}, {-0.506,0.367,0},      {-0.49,-0.619,0.49},   {-0.49,-0.619,-0.49},  {-0.467,0.367,0.199},  {-0.467,0.367,-0.199}, {-0.466,-0.656,0.466}, 
    {-0.466,0.329,0.466},  {-0.466,-0.656,-0.466},{-0.466,0.329,-0.466}, {-0.45,0.361,0.45},    {-0.45,0.361,-0.45},   {-0.436,0.371,0.436},  {-0.436,0.371,-0.436}, {-0.419,0.329,0.419},  
    {-0.419,0.329,-0.419}, {-0.429,0.361,0.429},  {-0.429,0.361,-0.429}, {-0.361,0.394,0},      {-0.359,0.367,0.359},  {-0.359,0.367,-0.359}, {-0.343,-0.327,0.807}, {-0.343,-0.327,-0.807},
    {-0.336,-0.175,0.79},  {-0.336,-0.175,-0.79}, {-0.333,0.394,0.142},  {-0.333,0.394,-0.142}, {-0.33,-0.458,0.776},  {-0.33,-0.458,-0.776}, {-0.317,-0.012,0.744}, {-0.317,-0.012,-0.744},
    {-0.301,-0.554,0.706}, {-0.301,-0.554,-0.706},{-0.289,0.157,0.68},   {-0.289,0.157,-0.68},  {-0.271,-0.619,0.637}, {-0.271,-0.619,-0.637},{-0.258,-0.656,0.605}, {-0.258,0.329,0.605},  
    {-0.258,-0.656,-0.605},{-0.258,0.329,-0.605}, {-0.256,0.394,0.256},  {-0.256,0.394,-0.256}, {-0.249,0.361,0.585},  {-0.249,0.361,-0.585}, {-0.241,0.371,0.566},  {-0.241,0.371,-0.566}, 
    {-0.232,0.329,0.545},  {-0.232,0.329,-0.545}, {-0.237,0.361,0.557},  {-0.237,0.361,-0.557}, {-0.2,0.421,0},        {-0.199,0.367,0.467},  {-0.199,0.367,-0.467}, {-0.184,0.421,0.078},  
    {-0.184,0.421,-0.078}, {-0.149,0.635,0},      {-0.142,0.583,0},      {-0.142,0.421,0.142},  {-0.142,0.421,-0.142}, {-0.142,0.394,0.333},  {-0.142,0.394,-0.333}, {-0.138,0.635,0.059},  
    {-0.138,0.635,-0.059}, {-0.131,0.583,0.056},  {-0.131,0.583,-0.056}, {-0.106,0.635,0.106},  {-0.106,0.635,-0.106}, {-0.101,0.583,0.101},  {-0.101,0.583,-0.101}, {-0.088,0.46,0},       
    {-0.086,0.518,0},      {-0.081,0.46,0.034},   {-0.081,0.46,-0.034},  {-0.079,0.518,0.034},  {-0.079,0.518,-0.034}, {-0.078,0.421,0.184},  {-0.078,0.421,-0.184}, {-0.062,0.46,0.062},   
    {-0.062,0.46,-0.062},  {-0.061,0.518,0.061},  {-0.061,0.518,-0.061}, {-0.059,0.635,0.138},  {-0.059,0.635,-0.138}, {-0.056,0.583,0.131},  {-0.056,0.583,-0.131}, {-0.034,0.46,0.081},   
    {-0.034,0.46,-0.081},  {-0.034,0.518,0.079},  {-0.034,0.518,-0.079}, {0,0.656,0},           {0,0.518,0.086},       {0,0.46,0.088},        {0,0.583,0.142},       {0,0.635,0.149},       
    {0,0.421,0.2},         {0,0.394,0.361},       {0,0.367,0.506},       {0,0.361,0.604},       {0,0.329,0.591},       {0,0.371,0.614},       {0,0.361,0.634},       {0,-0.656,0.656},      
    {0,0.329,0.656},       {0,-0.619,0.691},      {0,0.157,0.737},       {0,-0.554,0.766},      {0,-0.012,0.807},      {0,-0.458,0.841},      {0,-0.175,0.856},      {0,-0.327,0.875},      
    {0,0.518,-0.086},      {0,0.46,-0.088},       {0,0.583,-0.142},      {0,0.635,-0.149},      {0,0.421,-0.2},        {0,0.394,-0.361},      {0,0.367,-0.506},      {0,0.361,-0.604},      
    {0,0.329,-0.591},      {0,0.371,-0.614},      {0,0.361,-0.634},      {0,-0.656,-0.656},     {0,0.329,-0.656},      {0,-0.619,-0.691},     {0,0.157,-0.737},      {0,-0.554,-0.766},     
    {0,-0.012,-0.807},     {0,-0.458,-0.841},     {0,-0.175,-0.856},     {0,-0.327,-0.875},     {0.034,0.518,0.079},   {0.034,0.518,-0.079},  {0.034,0.46,0.081},    {0.034,0.46,-0.081},   
    {0.056,0.583,0.131},   {0.056,0.583,-0.131},  {0.059,0.635,0.138},   {0.059,0.635,-0.138},  {0.061,0.518,0.061},   {0.061,0.518,-0.061},  {0.062,0.46,0.062},    {0.062,0.46,-0.062},   
    {0.078,0.421,0.184},   {0.078,0.421,-0.184},  {0.079,0.518,0.034},   {0.079,0.518,-0.034},  {0.081,0.46,0.034},    {0.081,0.46,-0.034},   {0.086,0.518,0},       {0.088,0.46,0},        
    {0.101,0.583,0.101},   {0.101,0.583,-0.101},  {0.106,0.635,0.106},   {0.106,0.635,-0.106},  {0.131,0.583,0.056},   {0.131,0.583,-0.056},  {0.138,0.635,0.059},   {0.138,0.635,-0.059},  
    {0.142,0.394,0.333},   {0.142,0.394,-0.333},  {0.142,0.421,0.142},   {0.142,0.421,-0.142},  {0.142,0.583,0},       {0.149,0.635,0},       {0.184,0.421,0.078},   {0.184,0.421,-0.078},  
    {0.199,0.367,0.467},   {0.199,0.367,-0.467},  {0.2,0.421,0},         {0.237,0.361,0.557},   {0.237,0.361,-0.557},  {0.232,0.329,0.545},   {0.232,0.329,-0.545},  {0.241,0.371,0.566},   
    {0.241,0.371,-0.566},  {0.249,0.361,0.585},   {0.249,0.361,-0.585},  {0.256,0.394,0.256},   {0.256,0.394,-0.256},  {0.258,-0.656,0.605},  {0.258,0.329,0.605},   {0.258,-0.656,-0.605}, 
    {0.258,0.329,-0.605},  {0.271,-0.619,0.637},  {0.271,-0.619,-0.637}, {0.289,0.157,0.68},    {0.289,0.157,-0.68},   {0.301,-0.554,0.706},  {0.301,-0.554,-0.706}, {0.317,-0.012,0.744},  
    {0.317,-0.012,-0.744}, {0.33,-0.458,0.776},   {0.33,-0.458,-0.776},  {0.333,0.394,0.142},   {0.333,0.394,-0.142},  {0.336,-0.175,0.79},   {0.336,-0.175,-0.79},  {0.343,-0.327,0.807},  
    {0.343,-0.327,-0.807}, {0.359,0.367,0.359},   {0.359,0.367,-0.359},  {0.361,0.394,0},       {0.429,0.361,0.429},   {0.429,0.361,-0.429},  {0.419,0.329,0.419},   {0.419,0.329,-0.419},  
    {0.436,0.371,0.436},   {0.436,0.371,-0.436},  {0.45,0.361,0.45},     {0.45,0.361,-0.45},    {0.466,-0.656,0.466},  {0.466,0.329,0.466},   {0.466,-0.656,-0.466}, {0.466,0.329,-0.466},  
    {0.467,0.367,0.199},   {0.467,0.367,-0.199},  {0.49,-0.619,0.49},    {0.49,-0.619,-0.49},   {0.506,0.367,0},       {0.523,0.157,0.523},   {0.523,0.157,-0.523},  {0.544,-0.554,0.544},  
    {0.544,-0.554,-0.544}, {0.557,0.361,0.237},   {0.557,0.361,-0.237},  {0.545,0.329,0.232},   {0.545,0.329,-0.232},  {0.566,0.371,0.241},   {0.566,0.371,-0.241},  {0.573,-0.012,0.573},  
    {0.573,-0.012,-0.573}, {0.585,0.361,0.249},   {0.585,0.361,-0.249},  {0.597,-0.458,0.597},  {0.597,-0.458,-0.597}, {0.604,0.361,0},       {0.605,-0.656,0.258},  {0.605,0.329,0.258},   
    {0.605,-0.656,-0.258}, {0.605,0.329,-0.258},  {0.608,-0.175,0.608},  {0.608,-0.175,-0.608}, {0.591,0.329,0},       {0.614,0.371,0},       {0.621,-0.327,0.621},  {0.621,-0.327,-0.621}, 
    {0.634,0.361,0},       {0.637,-0.619,0.271},  {0.637,-0.619,-0.271}, {0.656,-0.656,0},      {0.656,0.329,0},       {0.68,0.157,0.289},    {0.68,0.157,-0.289},   {0.691,-0.619,0},      
    {0.706,-0.554,0.301},  {0.706,-0.554,-0.301}, {0.737,0.157,0},       {0.744,-0.458,0},      {0.744,-0.098,0},      {0.744,-0.402,0.162},  {0.744,-0.155,0.162},  {0.744,-0.278,0.217},  
    {0.744,-0.402,-0.162}, {0.744,-0.155,-0.162}, {0.744,-0.278,-0.217}, {0.744,-0.012,0.317},  {0.744,-0.012,-0.317}, {0.766,-0.554,0},      {0.776,-0.458,0.33},   {0.776,-0.458,-0.33},  
    {0.79,-0.175,0.336},   {0.79,-0.175,-0.336},  {0.807,-0.012,0},      {0.807,-0.327,0.343},  {0.807,-0.327,-0.343}, {0.841,-0.458,0},      {0.856,-0.175,0},      {0.875,-0.327,0},      
    {0.954,-0.05,0},       {0.97,-0.092,0.147},   {0.97,-0.092,-0.147},  {1.005,-0.184,0.196},  {1.005,-0.184,-0.196}, {1.04,-0.276,0.147},   {1.04,-0.276,-0.147},  {1.045,0.066,0},       
    {1.056,-0.317,0},      {1.065,0.042,0.112},   {1.065,0.042,-0.112},  {1.095,0.207,0},       {1.11,-0.012,0.149},   {1.11,-0.012,-0.149},  {1.12,0.198,0.077},    {1.12,0.198,-0.077},   
    {1.155,-0.065,0.112},  {1.155,-0.065,-0.112}, {1.175,0.179,0.103},   {1.175,0.179,-0.103},  {1.176,-0.09,0},       {1.181,0.329,0},       {1.213,0.347,0},       {1.222,0.329,0.062},   
    {1.222,0.329,-0.062},  {1.225,0.329,0},       {1.23,0.159,0.077},    {1.23,0.159,-0.077},   {1.236,0.353,0},       {1.243,0.347,0},       {1.253,0.329,0.037},   {1.253,0.329,-0.037},  
    {1.255,0.15,0},        {1.257,0.348,0.058},   {1.257,0.348,-0.058},  {1.277,0.354,0.049},   {1.277,0.354,-0.049},  {1.278,0.348,0.041},   {1.278,0.348,-0.041},  {1.313,0.329,0.049},   
    {1.313,0.329,0.082},   {1.313,0.329,-0.049},  {1.313,0.329,-0.082},  {1.353,0.35,0.077},    {1.353,0.35,-0.077},   {1.355,0.351,0.054},   {1.355,0.351,-0.054},  {1.368,0.358,0.066},   
    {1.368,0.358,-0.066},  {1.373,0.329,0.037},   {1.373,0.329,-0.037},  {1.4,0.329,0},         {1.403,0.329,0.062},   {1.403,0.329,-0.062},  {1.432,0.354,0.041},   {1.432,0.354,-0.041},  
    {1.444,0.329,0},       {1.45,0.352,0.058},    {1.45,0.352,-0.058},   {1.459,0.361,0.049},   {1.459,0.361,-0.049},  {1.467,0.355,0},       {1.494,0.353,0},       {1.5,0.363,0},         
    {-0.905,0.163,0},      {-0.911,0.178,0.074},  {-0.911,0.178,-0.074}, {-0.924,0.211,0.098},  {-0.924,0.211,-0.098}, {-0.937,0.244,0.074},  {-0.937,0.244,-0.074}, {-0.943,0.259,0},      
    {-1.015,-0.239,0},     {-1.02,-0.255,0.074},  {-1.02,-0.255,-0.074}, {-1.03,-0.29,0.098},   {-1.03,-0.29,-0.098},  {-1.04,-0.326,0.074},  {-1.04,-0.326,-0.074}, {-1.045,-0.342,0},     
    {-1.056,0.152,0},      {-1.07,0.166,0.074},   {-1.07,0.166,-0.074},  {-1.102,0.195,0.098},  {-1.102,0.195,-0.098}, {-1.11,-0.131,0},      {-1.124,-0.144,0.074}, {-1.124,-0.144,-0.074},
    {-1.134,0.224,0.074},  {-1.134,0.224,-0.074}, {-1.149,0.238,0},      {-1.149,0.123,0},      {-1.153,-0.173,0.098}, {-1.153,-0.173,-0.098},{-1.164,-0.024,0},     {-1.168,0.132,0.074},  
    {-1.168,0.132,-0.074}, {-1.181,0.066,0},      {-1.182,-0.202,0.074}, {-1.182,-0.202,-0.074},{-1.183,-0.032,0.074}, {-1.183,-0.032,-0.074},{-1.195,-0.215,0},     {-1.202,0.066,0.074},  
    {-1.202,0.066,-0.074}, {-1.21,0.151,0.098},   {-1.21,0.151,-0.098},  {-1.224,-0.051,0.098}, {-1.224,-0.051,-0.098},{-1.247,0.066,0.098},  {-1.247,0.066,-0.098}, {-1.253,0.171,0.074},  
    {-1.253,0.171,-0.074}, {-1.265,-0.07,0.074},  {-1.265,-0.07,-0.074}, {-1.272,0.18,0},       {-1.284,-0.078,0},     {-1.292,0.066,0.074},  {-1.292,0.066,-0.074}, {-1.313,0.066,0},          
  },
  arr[i32,2]{
    301,289,291,308; 289,268,270,291; 268,235,237,270; 235,163,164,237; 309,293,289,301; 293,272,268,289; 272,239,235,268; 239,165,163,235; 312,297,293,309; 297,274,272,293;
    274,241,239,272; 241,166,165,239; 316,303,297,312; 303,277,274,297; 277,246,241,274; 246,168,166,241; 163,114,112,164; 114,81 ,79 ,112; 81 ,60 ,58 ,79 ; 60 ,49 ,42 ,58 ;
    165,110,114,163; 110,77 ,81 ,114; 77 ,56 ,60 ,81 ; 56 ,41 ,49 ,60 ; 166,108,110,165; 108,75 ,77 ,110; 75 ,52 ,56 ,77 ; 52 ,38 ,41 ,56 ; 168,103,108,166; 103,72 ,75 ,108;
    72 ,46 ,52 ,75 ; 46 ,35 ,38 ,52 ; 49 ,61 ,59 ,42 ; 61 ,82 ,80 ,59 ; 82 ,115,113,80 ; 115,183,184,113; 41 ,57 ,61 ,49 ; 57 ,78 ,82 ,61 ; 78 ,111,115,82 ; 111,185,183,115;
    38 ,53 ,57 ,41 ; 53 ,76 ,78 ,57 ; 76 ,109,111,78 ; 109,186,185,111; 35 ,48 ,53 ,38 ; 48 ,74 ,76 ,53 ; 74 ,105,109,76 ; 105,188,186,109; 183,236,238,184; 236,269,271,238;
    269,290,292,271; 290,301,308,292; 185,240,236,183; 240,273,269,236; 273,294,290,269; 294,309,301,290; 186,242,240,185; 242,275,273,240; 275,298,294,273; 298,312,309,294;
    188,248,242,186; 248,279,275,242; 279,305,298,275; 305,316,312,298; 322,317,303,316; 317,285,277,303; 285,251,246,277; 251,170,168,246; 338,331,317,322; 331,295,285,317;
    295,255,251,285; 255,172,170,251; 342,336,331,338; 336,306,295,331; 306,261,255,295; 261,174,172,255; 343,339,336,342; 339,310,306,336; 310,263,261,306; 263,175,174,261;
    170,98 ,103,168; 98 ,64 ,72 ,103; 64 ,27 ,46 ,72 ; 27 ,20 ,35 ,46 ; 172,94 ,98 ,170; 94 ,54 ,64 ,98 ; 54 ,18 ,27 ,64 ; 18 ,12 ,20 ,27 ; 174,88 ,94 ,172; 88 ,43 ,54 ,94 ;
    43 ,13 ,18 ,54 ; 13 ,3  ,12 ,18 ; 175,86 ,88 ,174; 86 ,39 ,43 ,88 ; 39 ,10 ,13 ,43 ; 10 ,0  ,3  ,13 ; 20 ,28 ,48 ,35 ; 28 ,65 ,74 ,48 ; 65 ,99 ,105,74 ; 99 ,190,188,105;
    12 ,19 ,28 ,20 ; 19 ,55 ,65 ,28 ; 55 ,95 ,99 ,65 ; 95 ,192,190,99 ; 3  ,14 ,19 ,12 ; 14 ,44 ,55 ,19 ; 44 ,89 ,95 ,55 ; 89 ,194,192,95 ; 0  ,11 ,14 ,3  ; 11 ,40 ,44 ,14 ;
    40 ,87 ,89 ,44 ; 87 ,195,194,89 ; 190,252,248,188; 252,286,279,248; 286,318,305,279; 318,322,316,305; 192,256,252,190; 256,296,286,252; 296,332,318,286; 332,338,322,318;
    194,262,256,192; 262,307,296,256; 307,337,332,296; 337,342,338,332; 195,264,262,194; 264,311,307,262; 311,340,337,307; 340,343,342,337; 341,334,339,343; 334,299,310,339;
    299,257,263,310; 257,173,175,263; 333,320,334,341; 320,287,299,334; 287,253,257,299; 253,171,173,257; 319,313,320,333; 313,282,287,320; 282,249,253,287; 249,169,171,253;
    315,302,313,319; 302,276,282,313; 276,245,249,282; 245,167,169,249; 173,92 ,86 ,175; 92 ,50 ,39 ,86 ; 50 ,15 ,10 ,39 ; 15 ,6  ,0  ,10 ; 171,96 ,92 ,173; 96 ,62 ,50 ,92 ;
    62 ,21 ,15 ,50 ; 21 ,17 ,6  ,15 ; 169,100,96 ,171; 100,67 ,62 ,96 ; 67 ,36 ,21 ,62 ; 36 ,26 ,17 ,21 ; 167,102,100,169; 102,71 ,67 ,100; 71 ,45 ,36 ,67 ; 45 ,33 ,26 ,36 ;
    6  ,16 ,11 ,0  ; 16 ,51 ,40 ,11 ; 51 ,93 ,87 ,40 ; 93 ,193,195,87 ; 17 ,22 ,16 ,6  ; 22 ,63 ,51 ,16 ; 63 ,97 ,93 ,51 ; 97 ,191,193,93 ; 26 ,37 ,22 ,17 ; 37 ,68 ,63 ,22 ;
    68 ,101,97 ,63 ; 101,189,191,97 ; 33 ,47 ,37 ,26 ; 47 ,73 ,68 ,37 ; 73 ,104,101,68 ; 104,187,189,101; 193,258,264,195; 258,300,311,264; 300,335,340,311; 335,341,343,340;
    191,254,258,193; 254,288,300,258; 288,321,335,300; 321,333,341,335; 189,250,254,191; 250,283,288,254; 283,314,321,288; 314,319,333,321; 187,247,250,189; 247,278,283,250;
    278,304,314,283; 304,315,319,314; 408,409,24 ,23 ; 409,411,29 ,24 ; 411,413,31 ,29 ; 413,415,34 ,31 ; 424,425,409,408; 425,427,411,409; 427,432,413,411; 432,434,415,413;
    435,439,425,424; 439,449,427,425; 449,455,432,427; 455,459,434,432; 441,447,439,435; 447,453,449,439; 453,461,455,449; 461,463,459,455; 415,414,32 ,34 ; 414,412,30 ,32 ;
    412,410,25 ,30 ; 410,408,23 ,25 ; 434,433,414,415; 433,428,412,414; 428,426,410,412; 426,424,408,410; 459,456,433,434; 456,450,428,433; 450,440,426,428; 440,435,424,426;
    463,462,456,459; 462,454,450,456; 454,448,440,450; 448,441,435,440; 438,444,447,441; 444,451,453,447; 451,457,461,453; 457,460,463,461; 429,430,444,438; 430,436,451,444;
    436,442,457,451; 442,446,460,457; 416,417,430,429; 417,419,436,430; 419,421,442,436; 421,423,446,442; 0  ,1  ,417,416; 1  ,4  ,419,417; 4  ,7  ,421,419; 7  ,9  ,423,421;
    460,458,462,463; 458,452,454,462; 452,445,448,454; 445,438,441,448; 446,443,458,460; 443,437,452,458; 437,431,445,452; 431,429,438,445; 423,422,443,446; 422,420,437,443;
    420,418,431,437; 418,416,429,431; 9  ,8  ,422,423; 8  ,5  ,420,422; 5  ,2  ,418,420; 2  ,0  ,416,418; 344,345,326,324; 345,347,327,326; 347,349,325,327; 349,352,323,325;
    351,353,345,344; 353,356,347,345; 356,360,349,347; 360,364,352,349; 355,358,353,351; 358,362,356,353; 362,370,360,356; 370,376,364,360; 365,367,358,355; 367,384,362,358;
    384,396,370,362; 396,400,376,370; 352,350,328,323; 350,348,330,328; 348,346,329,330; 346,344,324,329; 364,361,350,352; 361,357,348,350; 357,354,346,348; 354,351,344,346;
    376,371,361,364; 371,363,357,361; 363,359,354,357; 359,355,351,354; 400,397,371,376; 397,386,363,371; 386,368,359,363; 368,365,355,359; 366,377,367,365; 377,387,384,367;
    387,401,396,384; 401,406,400,396; 372,379,377,366; 379,391,387,377; 391,403,401,387; 403,407,406,401; 373,381,379,372; 381,389,391,379; 389,398,403,391; 398,405,407,403;
    369,374,381,373; 374,383,389,381; 383,393,398,389; 393,395,405,398; 406,402,397,400; 402,388,386,397; 388,378,368,386; 378,366,365,368; 407,404,402,406; 404,392,388,402;
    392,380,378,388; 380,372,366,378; 405,399,404,407; 399,390,392,404; 390,382,380,392; 382,373,372,380; 395,394,399,405; 394,385,390,399; 385,375,382,390; 375,369,373,382;
    229,222,218,155; 218,202,159,155; 228,220,222,229; 220,216,218,222; 216,200,202,218; 200,158,159,202; 214,210,220,228; 210,204,216,220; 204,196,200,216; 196,156,158,200;
    215,212,210,214; 212,206,204,210; 206,198,196,204; 198,157,156,196; 159,147,131,155; 131,127,121,155; 158,149,147,159; 149,133,131,147; 133,129,127,131; 129,122,121,127;
    156,153,149,158; 153,145,133,149; 145,139,129,133; 139,136,122,129; 157,151,153,156; 151,143,145,153; 143,137,139,145; 137,135,136,139; 121,128,132,155; 132,148,179,155;
    122,130,128,121; 130,134,132,128; 134,150,148,132; 150,178,179,148; 136,140,130,122; 140,146,134,130; 146,154,150,134; 154,176,178,150; 135,138,140,136; 138,144,146,140;
    144,152,154,146; 152,177,176,154; 179,203,219,155; 219,223,229,155; 178,201,203,179; 201,217,219,203; 217,221,223,219; 221,228,229,223; 176,197,201,178; 197,205,217,201;
    205,211,221,217; 211,214,228,221; 177,199,197,176; 199,207,205,197; 207,213,211,205; 213,215,214,211; 234,230,212,215; 230,226,206,212; 226,208,198,206; 208,160,157,198;
    267,259,230,234; 259,243,226,230; 243,224,208,226; 224,161,160,208; 284,280,259,267; 280,265,243,259; 265,232,224,243; 232,162,161,224; 308,291,280,284; 291,270,265,280;
    270,237,232,265; 237,164,162,232; 160,141,151,157; 141,123,143,151; 123,119,137,143; 119,116,135,137; 161,125,141,160; 125,106,123,141; 106,90 ,119,123; 90 ,83 ,116,119;
    162,117,125,161; 117,84 ,106,125; 84 ,69 ,90 ,106; 69 ,66 ,83 ,90 ; 164,112,117,162; 112,79 ,84 ,117; 79 ,58 ,69 ,84 ; 58 ,42 ,66 ,69 ; 116,120,138,135; 120,124,144,138;
    124,142,152,144; 142,180,177,152; 83 ,91 ,120,116; 91 ,107,124,120; 107,126,142,124; 126,181,180,142; 66 ,70 ,91 ,83 ; 70 ,85 ,107,91 ; 85 ,118,126,107; 118,182,181,126;
    42 ,59 ,70 ,66 ; 59 ,80 ,85 ,70 ; 80 ,113,118,85 ; 113,184,182,118; 180,209,199,177; 209,227,207,199; 227,231,213,207; 231,234,215,213; 181,225,209,180; 225,244,227,209;
    244,260,231,227; 260,267,234,231; 182,233,225,181; 233,266,244,225; 266,281,260,244; 281,284,267,260; 184,238,233,182; 238,271,266,233; 271,292,281,266; 292,308,284,281;
    302,167,245,276; 315,102,167,302; 304,71 ,102,315; 278,45 ,71 ,304; 247,33 ,45 ,278; 187,47 ,33 ,247; 104,73 ,47 ,187; 383,374,369,393; 393,369,375,395; 395,375,385,394;
  },0
)

plane := g3d.Mesh{
  vertices:list[vec[f32,3]]{
    {-5,0,-5},{5,0,-5},{5,0,5},{-5,0,5}
  },
  indices:list[i32]{
    0,1,2, 0,2,3
  },
  normals:list[vec[f32,3]]{
    {0,1,0},{0,1,0},{0,1,0},{0,1,0}
  },
  uvs:list[vec[f32,2]]{
    {0,0},{1,0},{1,1},{0,1}
  }
}

func draw_scene(){
  frag.uniform("base",{1.0,0.5,0.5})
  tetrahedron.draw(
    g3d.mat.translate(-3,1,-1.5) @*
    g3d.mat.rotate_deg(g3d.AXIS_X,frame) @*
    g3d.mat.rotate_deg(g3d.AXIS_Y,frame)
  );

  frag.uniform("base",{0.5,1.0,0.5})
  hexahedron.draw(
    g3d.mat.translate(0,1,-1.5) @*
    g3d.mat.rotate_deg(g3d.AXIS_Y,frame) @*
    g3d.mat.rotate_deg(g3d.AXIS_Z,frame)
  );

  frag.uniform("base",{0.5,0.5,1.0})
  octahedron.draw(
    g3d.mat.translate(3,1,-1.5) @*
    g3d.mat.rotate_deg(g3d.AXIS_Z,frame) @*
    g3d.mat.rotate_deg(g3d.AXIS_X,frame)
  );

  frag.uniform("base",{0.5,1.0,1.0})
  dodecahedron.draw(
    g3d.mat.translate(-3,1,1.5) @*
    g3d.mat.rotate_deg(g3d.AXIS_Y,frame) @*
    g3d.mat.rotate_deg(g3d.AXIS_X,frame)
  );

  frag.uniform("base",{1.0,0.5,1.0})
  icosahedron.draw(
    g3d.mat.translate(0,1,1.5) @*
    g3d.mat.rotate_deg(g3d.AXIS_Z,frame) @*
    g3d.mat.rotate_deg(g3d.AXIS_Y,frame)
  );

  frag.uniform("base",{1.0,1.0,0.5})
  teapotahedron.draw(
    g3d.mat.translate(3,0.65,1.5) @*
    g3d.mat.rotate_deg(g3d.AXIS_Y,frame*1.5)
  );
}

cam := g3d.Camera{}

shadow := frag.texture(512,512);

light := g3d.Camera{}
ld := ({1,-1.5,-1}).dir();

light.proj = g3d.mat.scale(0.2) @* {
  1,-ld.x/ld.y,0,0;
  0,-ld.z/ld.y,1,0;
  0,         0,0,0;
  0,         0,0,1.
}

frame := 0;
while (1){
  time.fps(120);
  
  frag.begin(shader1,shadow);
  g3d.background(1);
  light.begin();
  draw_scene();
  light.end();
  frag.end();

  cam.look_at({math.sin(frame*0.01)*6,8,math.cos(frame*0.01)*6},{0,0,0},g3d.AXIS_Y);
  cam.perspective(60,W/(H as f32),0.1,100.0);

  frag.begin(shader2);
  g3d.background(0.1,0.2,0.3)
  frag.uniform("image", shadow);
  cam.begin();
  plane.draw(g3d.mat.id);
  cam.end();
  frag.end();

  frag.begin(shader0);
  frag.uniform("l",ld*-1);
  cam.begin();
  draw_scene();
  cam.end();
  frag.end();

  g3d.flush();
  win.poll();
  frame++;
}