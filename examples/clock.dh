include "std/time"
include "std/math"
include "std/gx"
include "std/str"

W := 256

r_face:= W*0.48
r_tick:= W*0.45
r_hour:= W*0.25
r_min := W*0.35
r_sec := W*0.42

month_names := list[str]{
  "JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC"
};

gx.size(W,W);

while (1){
  gx.background(0.5);
  gx.fill(1.0);

  [year,month,day,hour,min,sec] := time.local();

  gx.push_matrix();
  gx.translate(W*0.5,W*0.5);

  gx.stroke_weight(2);
  gx.ellipse(0,0,r_face*2,r_face*2);

  s := (sec          )/60.0*math.PI*2-math.PI/2;
  m := (min +sec/60.0)/60.0*math.PI*2-math.PI/2;
  h := (hour+min/60.0)/12.0*math.PI*2-math.PI/2;

  for (i := 0; i < 60; i++){
    
    ang := i/60.0 * math.PI*2;
    if (!(i%5)){
      gx.stroke_weight(1);
      gx.line(
        r_tick*math.cos(ang),r_tick*math.sin(ang),
        r_sec *math.cos(ang),r_sec *math.sin(ang)
      );
    }else{
      gx.stroke_weight(2);
      gx.point(r_tick*math.cos(ang),r_tick*math.sin(ang));
    }
  }

  gx.stroke_weight(1);
  gx.line(0,0,r_sec *math.cos(s),r_sec *math.sin(s));

  gx.stroke_weight(2);
  gx.line(0,0,r_min *math.cos(m),r_min *math.sin(m));

  gx.stroke_weight(4);
  gx.line(0,0,r_hour*math.cos(h),r_hour*math.sin(h));

  gx.fill(0.0);
  calen := "%{month_names[month-1]} %{day}, %{year}";

  gx.text(calen,-calen.length()*4.0,W*0.25);

  gx.pop_matrix();
  gx.poll();
}