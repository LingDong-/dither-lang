include "std/req"
include "std/io"
include "std/str"
include "std/exch"
include "std/img"
include "std/gx"
include "std/arr"
include "std/dict"

ipres := str.decode(req.http(req.Request{
  url:"https://ipapi.co/json/"
}).body,"utf-8");

iploc := exch.decode[exch.JSON](ipres);

cit := ((iploc.data as dict[str,exch.JSON])["city"     ].data as str);
cou := ((iploc.data as dict[str,exch.JSON])["country"  ].data as str);
lat := ((iploc.data as dict[str,exch.JSON])["latitude" ].data as f32);
lon := ((iploc.data as dict[str,exch.JSON])["longitude"].data as f32);

imres := str.decode(req.http(req.Request{
  url:"https://commons.wikimedia.org/w/api.php?action=query"+
      "&generator=geosearch&ggscoord=%{lat}%7C%{lon}"+
      "&ggslimit=1&ggsnamespace=6&iilimit=1&iiprop=url"+
      "&iiurlwidth=300&prop=imageinfo&format=json&origin=*"
}).body,"utf-8");

iminf := exch.decode[exch.JSON](imres);

imurl := ((((((iminf.data 
  as dict[str,exch.JSON])["query"].data 
  as dict[str,exch.JSON])["pages"].data 
  as dict[str,exch.JSON]).values()[0].data
  as dict[str,exch.JSON])["imageinfo"].data
  as list[exch.JSON])[0].data
  as dict[str,exch.JSON])["thumburl"].data as str

pixels := img.decode(req.http(req.Request{url:imurl}).body);

({H,W,_}) := pixels.shape();

gx.size(W,H+32);
pg := gx.create_graphics(W,H);
pg.write_pixels(pixels);

while (1){
  gx.background(0.);
  pg.draw(0,32);
  gx.text("%{cit}, %{cou}",0,16);
  gx.text("lat: %{lat}, lon: %{lon}",0,32);
  gx.poll();
}
