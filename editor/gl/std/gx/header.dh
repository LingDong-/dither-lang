include "std/win"

namespace gx {
  func _begin_fbo(fbo:i32);
  func _end_fbo();
  func _draw_texture(tex:i32,x:f32,y:f32,w:f32,h:f32);
  typedef Graphics = {
    fbo  : i32;
    tex  : i32;
    w    : i32;
    h    : i32;
    func begin() {_begin_fbo(this.fbo);};
    func end()   {  _end_fbo();};
    func draw(x:f32,y:f32,w:f32,h:f32)  {_draw_texture(this.tex,x,y,w,h);};
    func draw(x:f32,y:f32)    {_draw_texture(this.tex,x,y,this.w,this.h);};
  };
  typedef Font = i32;
  func _size(w:i32,h:i32,ctx:u64);
  func size(w:i32,h:i32){_size(w,h,win.init(w,h,win.CONTEXT_2D));}
  func begin_shape();
  func end_shape(close:i32);
  func vertex(x:f32,y:f32);
  func background(r:f32,g:f32,b:f32,a:f32);
  func background(r:f32,g:f32,b:f32){background(r,g,b,1.0);};
  func background(r:f32){background(r,r,r,1.0);};
  func fill(r:f32,g:f32,b:f32,a:f32);
  func stroke(r:f32,g:f32,b:f32,a:f32);
  func fill(r:f32,g:f32,b:f32){fill(r,g,b,1.0);};
  func stroke(r:f32,g:f32,b:f32){stroke(r,g,b,1.0);};
  func fill(r:f32){fill(r,r,r,1.0);};
  func stroke(r:f32){stroke(r,r,r,1.0);};
  func stroke_weight(w:f32);
  func no_fill();
  func no_stroke();
  func point(x:f32,y:f32);
  func rect(x:f32,y:f32,w:f32,h:f32);
  func line(x0:f32,y0:f32,x1:f32,y1:f32);
  func ellipse(x:f32,y:f32,w:f32,h:f32);
  func circle(x:f32,y:f32,d:f32){ellipse(x,y,d,d);};
  func next_contour(close:i32);
  func push_matrix();
  func pop_matrix();
  func reset_matrix();
  func rotate_deg(x:f32);
  func translate(x:f32,y:f32);
  func scale(x:f32,y:f32);
  func apply_matrix(x:vec[f32,3,3]);
  func text(s:str,x:f32,y:f32);
  func poll():win.Event{return win.poll()};
  func _init_graphics(pg:Graphics,w:i32,h:i32);
  func create_graphics(w:i32,h:i32):Graphics{pg:=Graphics{};_init_graphics(pg,w,h);return pg;};
}
